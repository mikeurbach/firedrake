logging

all of the logging functions are defined as macros within the underlying C code. all logging messages will appear in the log file "log.fd" in the format of [MESSAGE_TYPE] FILE:LINE <your message>.  all logging is performed in a secondary thread to avoid interrupting the asynchronous i/o of the main event loop.

fd_log_setup
	if you wish to use the built in logging functions, you must run this macro at the beginning of your server code.  this function opens the logging file which is called  log.fd.	

fd_log_d(format_string char[]);
	logs a DEBUG message. firedrake recommends you use the DEBUG message so your own messages will be easier to find within the log.fd file

fd_log_i(format_string char[]);
	logs and INFO message.

fd_log_m(format_string char[]);
	logs a MESSAGE message.

fd_log_w(format_string char[]);
	logs a WARNING message.

fd_log_c(format_string char[]);
	logs a CRITICAL message.

fd_log_e(format_string char[]);	
	logs an ERROR message.


channels (additions)

void remove_from_all_channels(int sockid)
	parameters:

	int sockid: the file descriptor of the socket you wish to remove from all channels

	returns: void

	description:

	remove_from_all_channels allows you to remove a socket from all channels.  you provide the file descriptor of the socket that you wish to remove.  the function removes the socket from all of the channel socket lists that it is in

void remove_from_channel(char *key, int sockid)
	parameters:

	char *key: the name of the channel you want to remove from

	int sockid: the file descriptor of the socket you wish to remove from the channel

	returns: void

	description:

	remove_from_channel allows you to remove a socket from a channel.  you provide the file descriptor of the socket that you wish to remove and the channel you wish to remove it from.  the function removes the socket from the channel's list of sockets.

void fd_close_channel(char *key)
	parameters:

	char *key: the name of the channel you wish to close

	returns: void

	description:

	fd_close_channel allows you to close a channel. you provide the name of the channel you wish to close and the function takes care of gracefully freeing all of the associated memory and removing it from the hashtable of channels.  none of the channel's associated sockets (if any) are destroyed.

close_all_channels()
	parameters:

	none

	returns: void

	description:

	close_all_channels closes all the channels and frees the associated memory without destroying the sockets.


handling connections (addition/edit)
	
void fd_socket_destroy(int sockid)
	parameters:

	int sockid: the file descriptor of the socket you wish to destroy

	returns: void

	description:

	fd_socket_destroy allows you to close a socket and free its related memory. you provide the id of the socket you wish to destroy, and the function takes care of finding its associated struct, removing it from channels it is in, and freeing its memory.


tutorial

#include "fd.h"
	"fd.h" is the file that contains all of the firedrake function prototypes

void onconnection(fd_socket_t *);
void ondata(fd_socket_t *, char *);
void onend(fd_socket_t *);
void onchannel(fd_socket_t *, char *, int);
	these are the function prototypes for all of the event types that firedrake supports.

main function:

fd_log_setup;

	if you wish to use firedrake's logging functionality before you call fd_run, you must use this macro to set up the log file.

if(argc != 2){
	printf("usage: server <port>\n");
	exit(1);
}
port = atoi(argv[1]);

	take a command line argument to determine what port you would like your server to listen on.  you may wish to hard code this port into your server or not.
	

create_channel("chatroom")
	
	creates a channel that will hold some sockets called "chatroom".  in general the user simply needs to keep track of channel names and socket file descriptors and firedrake takes care of the rest.

fd_run(port, onconnection);
	
	runs the firedrake event loop. port is the port you would like to listen on for connections (here obtained from the command line argument). onconnection is a function callback that will be run everytime a new connection is accepted, we will define this in a second.

void onconnection(fd_socket_t *socket):

	this will be invoked every time a new socket is connected. the callback is passed the newly created socket object. in this example, the callback sets the callback that will be invoked when there is a message from the client, and adds the socket to the "chatroom" channel.  we don't do it here, but you may wish to access the socket file descriptor in this function. you may do this by using socket->tcp_sock. 

fd_log_d("onconnection invoked on new socket with id %d\n", socket->tcp_sock);
	
	this is a firedrake logging debug (hence the _d) statement. it takes a formatted string, and will show up in the log file called log.fd. firedrake recommends that you use mostly fd_log_d statements for logging, as they will be easier to find in the log file.

socket->data_cb = ondata;
socket->end_cb = onend;

	these two lines set function callbacks for two more firedrake supported events called ondata and onend. we will discuss these more in a bit.

fd_join_channel(socket, "chatroom", onchannel);
	
	this is how you add your newly created socket to the "chatroom" channel that you created in your main function.


void ondata(fd_socket_t *socket, char *buffer)

	as mentioned previously, ondata is one of the events that firedrake provides you.  it gets passed the socket and a buffer from the event loop any time the socket's buffer has received some data.  you may wish to do something with the data, or you may wish to simply add it to the buffer and wait for the full message to arrive, which is what the onend event defines.

int length = socket->data == NULL ? 0 : strlen((char *) socket->data);
	
fd_log_d("ondata invoked on socket with id %d\n", socket->tcp_sock);

	another logging statement to provide some info in the log file.

socket->data = realloc(socket->data, length + strlen(buffer) + 1);
fd_strcat((char *) socket->data, buffer, length);

	for our chatroom example we will simply add the data to the growing buffer and wait for a full message to arrive.


void onend(fd_socket_t *socket)
	
	the onend event is the function callback for when a full message has been received via the open websocket.  it is simply passed the socket struct from which the data came.

fd_broadcast(socket, "chatroom", (char *) socket->data, TEXT);

	this line broadcasts the message that was in socket->data to the "chatroom" channel as a TEXT message.

fd_log_d("onend invoked on socket with id %d\n", socket->tcp_sock);
	
	another debugging statement.

socket->data = NULL;

	reset the socket's data field to NULL.


void onchannel(fd_socket_t *socket, char *buffer, int msg_type)

	this will be invoked every time a socket in the channel broadcasts a message.  the callback is passed the socket object, a buffer of data that has been received from the channel, and the type of message that was broadcast. in this example, the callback simply sends the buffer back to the socket's client.

fd_send(socket, buffer, msg_type);
	send the buffer to the socket with the msg_type specified by the parameter.